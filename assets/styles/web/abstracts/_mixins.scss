/* #region Typographie */
@mixin typography($fontWeight, $fontFile, $fontStyle: false){
    @font-face {
        font-family: $fontFamily;
        font-weight: $fontWeight;
        @if $fontStyle{
            font-style: italic;
        }
        src: url('../../../fonts/raleway/' + $fontFile + '.ttf');
    }
}

@mixin font($weight, $size, $title, $fontFamily){
    $fontSize: calc((#{$size} / #{$fsBody}) * 1em);
    $lineHeight: if($title, calc(#{$lhTitle} * 1em), calc(#{$lhText} * 1em));
    font: $weight $fontSize/$lineHeight $fontFamily;
}
/* #endregion Typographie */


/* #region Grid */
@mixin flexColSize($size){
    width: calc(100% / $grid-size) * $size;
}

@mixin pushColSize($size){
    margin-left: calc(100% / $grid-size) * $size;
}

@mixin flexBlockInit(){
    @for $i from 0 through $grid-size{
        &-#{$i}{
            @include flexColSize($i);
        }
        &-push-#{$i}{
            @include pushColSize($i)
        }
    }
}

@mixin respFlexBlockInit($breakpoint, $max-width) {
    @media screen and (max-width: $max-width) {
        &-#{$breakpoint} {
            @include flexBlockInit();
        }
    }
}
/* #endregion Grid */


/* #region Position */
@mixin positionRespInit($status, $size, $start){
    @if $start == 0 {
        position: $status;
        @media screen and (max-width: $size) {
            position: inherit;
        }    
    } @else if $start == 1 {
        position: inherit;
        @media screen and (max-width: $size) {
            position: $status;
        } 
    }
}

@mixin positionInit($status) {
    position: $status;
    @each $state in no, on {
        &-#{$state} {
            @each $breakpoint, $max-width in $breakpoints  {
                &-#{$breakpoint} {
                    @include positionRespInit($status, map-get($breakpoints, $breakpoint), if($state == 'on', 1, 0));
                }
            }
        }
    }
}  
/* #endregion Position */


/* #region Width / Height */
@mixin sizeInit($type, $size, $screen, $start){
    @if $start == 0 {
        #{$type}: $size;
        @media screen and (max-width: $screen) {
            #{$type}: inherit;
        }    
    } @else if $start == 1 {
        @media screen and (max-width: $screen) {
            #{$type}: $size;
        } 
    }
}

@mixin sizeType($type, $size) {
    #{$type}: $size;
    @each $state in no, on {
        &-#{$state} {
            @each $breakpoint, $max-width in $breakpoints {
                &-#{$breakpoint} {
                    @include sizeInit($type, $size, $max-width, if($state == 'on', 1, 0));
                }
            }
        }
    }
}
/* #endregion Width / Height */


/* #region Borders */
@mixin borderInit($size, $start: 0, $side: null) {
    @if $start == 0 {
        @if $side != null {
            border-#{$side}: 1px solid grey;
        } @else {
            border: 1px solid grey;
        }
        @media screen and (max-width: $size) {
            @if $side != null {
                border-#{$side}: inherit;
            } @else {
                border: inherit;
            }
        }
    } @else if $start == 1 {
        @media screen and (max-width: $size) {
            @if $side != null {
                border-#{$side}: 1px solid grey;
            } @else {
                border: 1px solid grey;
            }
        }
    }
}

@mixin borderResp($start, $side) {
    @each $breakpoint, $max-width in $breakpoints {
        &-#{$breakpoint} {
            @include borderInit($max-width, $start, $side);
        }
    }
}
/* #endregion Borders */


/* #region Marges */
@mixin margeInit($type, $side){
    @if $side == 'null' {
        #{$type}: $marge-d-y $marge-d-x;
    }
    @else if $side == 'auto' {
        #{$type}: auto;
    }
    @else if $side == 'none' {
        #{$type}: 0;
    }
    @else if $side == 'top' {
        #{$type}-top: $marge-d-y;
    }
    @else if $side == 'bottom' {
        #{$type}-bottom: $marge-d-y;
    }
    @else if $side == 'left' {
        #{$type}-left: $marge-d-x;
    }
    @else if $side == 'right' {
        #{$type}-right: $marge-d-x;
    } 
    @else {
        @warn "Invalid value for $side. Use one of: null, auto, none, top, bottom, left, right.";
    }
}

@mixin margeResp($type, $side, $size) {
    @include margeInit($type, $side);
    @media screen and (max-width: $size) {
        @if $side == 'top' or $side == 'bottom' or $side == 'left' or $side == 'right' {
            #{$type}-#{$side}: $marge-m;
        } @else if $side == 'null' {  
            #{$type}: $marge-m;  
        } @else {
            @warn "Invalid value for $side. Use one of: null, top, bottom, left, right.";
        }
    }
}

@mixin margeType($type){
    &-all{
        @include margeInit($type, 'null');
        &-no{
            &-lg{
                @include margeResp($type, 'null', $lg);
            }
            &-md{
                @include margeResp($type, 'null', $md);
            }
            &-sm{
                @include margeResp($type, 'null', $sm);
            }
            &-xs{
                @include margeResp($type, 'null', $xs);
            }
        }
    }
    &-none{
        @include margeInit($type, 'none');
    }
    &-auto{
        @include margeInit($type, 'auto');
    }
    &-vertical{
        @include margeInit($type, 'top');
        @include margeInit($type, 'bottom');
        &-no{
            &-lg{
                @include margeResp($type, 'top', $lg);
                @include margeResp($type, 'bottom', $lg);
            }
            &-md{
                @include margeResp($type, 'top', $md);
                @include margeResp($type, 'bottom', $md);
            }
            &-sm{
                @include margeResp($type, 'top', $sm);
                @include margeResp($type, 'bottom', $sm);
            }
            &-xs{
                @include margeResp($type, 'top', $xs);
                @include margeResp($type, 'bottom', $xs);
            }    
        }
    }
    &-horizontal{
        @include margeInit($type, 'left');
        @include margeInit($type, 'right');
        &-no{
            &-lg{
                @include margeResp($type, 'left', $lg);
                @include margeResp($type, 'right', $lg);
            }
            &-md{
                @include margeResp($type, 'left', $md);
                @include margeResp($type, 'right', $md);
            }
            &-sm{
                @include margeResp($type, 'left', $sm);
                @include margeResp($type, 'right', $sm);
            }
            &-xs{
                @include margeResp($type, 'left', $xs);
                @include margeResp($type, 'right', $xs);
            }
        }
    }
    &-top{
        @include margeInit($type, 'top');
        &-none{
            margin-top: 0;
        }
        &-no{
            &-lg{
                @include margeResp($type, 'top', $lg);
            }
            &-md{
                @include margeResp($type, 'top', $md);
            }
            &-sm{
                @include margeResp($type, 'top', $sm);
            }
            &-xs{
                @include margeResp($type, 'top', $xs);
            }    
        }
    }
    &-bottom{
        @include margeInit($type, 'bottom');
        &-none{
            margin-bottom: 0;
        }
        &-no{
            &-lg{
                @include margeResp($type, 'bottom', $lg);
            }
            &-md{
                @include margeResp($type, 'bottom', $md);
            }
            &-sm{
                @include margeResp($type, 'bottom', $sm);
            }
            &-xs{
                @include margeResp($type, 'bottom', $xs);
            }
        }
    }
    &-left{
        @include margeInit($type, 'left');
        &-none{
            margin-left: 0;
        }
        &-no{
            &-lg{
                @include margeResp($type, 'left', $lg);
            }
            &-md{
                @include margeResp($type, 'left', $md);
            }
            &-sm{
                @include margeResp($type, 'left', $sm);
            }
            &-xs{
                @include margeResp($type, 'left', $xs);
            }    
        } 
    }
    &-right{
        @include margeInit($type, 'right');
        &-none{
            margin-right: 0;
        }
        &-no-lg{
            @include margeResp($type, 'right', $lg);
        }
        &-no-md{
            @include margeResp($type, 'right', $md);
        }
        &-no-sm{
            @include margeResp($type, 'right', $sm);
            }
        &-no-xs{
            @include margeResp($type, 'right', $xs);
    }
  }
}
/* #endregion Marges */


/* #region Display */
@mixin display($display, $size, $start){
    @if $start == 0{
        display: $display;
        @media screen and (max-width: $size) {
            display: inherit;
        }
    }
    @else if $start == 1 {
        @media screen and (max-width: $size) {
            display: $display;
        }
    }
}

@mixin displayInit($display) {
    display: $display;
  
    @each $state in no, on {
        &-#{$state} {
            @each $breakpoint, $max-width in $breakpoints {
                &-#{$breakpoint} {
                    @include display($display, $max-width, if($state == 'on', 1, 0));
                }
            }
        }
    }
  }
/* #endregion Display */